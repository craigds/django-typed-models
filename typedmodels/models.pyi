"""This type stub file was generated by pyright."""

from django.db import models
from django.db.models.base import ModelBase

class TypedModelManager(models.Manager):
    def get_queryset(self): ...

class TypedModelMetaclass(ModelBase):
    """This metaclass enables a model for auto-downcasting using a ``type`` attribute."""

    def __new__(meta, classname, bases, classdict): ...

class TypedModel(models.Model, metaclass=TypedModelMetaclass):
    '''
    This class contains the functionality required to auto-downcast a model based
    on its ``type`` attribute.

    To use, simply subclass TypedModel for your base type, and then subclass
    that for your concrete types.

    Example usage::

        from django.db import models
        from typedmodels.models import TypedModel

        class Animal(TypedModel):
            """
            Abstract model
            """
            name = models.CharField(max_length=255)

            def say_something(self):
                raise NotImplemented

            def __repr__(self):
                return u'<%s: %s>' % (self.__class__.__name__, self.name)

        class Canine(Animal):
            def say_something(self):
                return "woof"

        class Feline(Animal):
            def say_something(self):
                return "meoww"
    '''

    objects = ...
    type = ...
    _auto_recast = ...

    class Meta:
        abstract = ...
    @classmethod
    def from_db(cls, db, field_names, values):  # -> Self@TypedModel:
        ...
    def __init__(self, *args, _typedmodels_do_recast=..., **kwargs) -> None: ...
    def recast(self, typ=...):  # -> None:
        ...
    def save(self, *args, **kwargs): ...

_python_serializer_get_dump_object = ...
_xml_serializer_start_object = ...
